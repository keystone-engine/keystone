name: PyPI ðŸ“¦ Distribution

on:
  workflow_dispatch:
  pull_request: # Ensures PRs don't break the build process
  push:

jobs:
  build_sdist:
    name: "sdist"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Build sdist
        run: |
          cd bindings/python && python setup.py sdist

      - uses: actions/upload-artifact@v3
        with:
          path: bindings/python/dist/*

  build_wheels_windows:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        cibw_build: ["cp38-*", "cp39-*", "cp310-*", "cp311-*"]
        cibw_archs: ["AMD64", "x86", "ARM64"]
        exclude:
          - os: windows-latest
            cibw_build: "cp38-*"
            cibw_archs: "ARM64"

    steps:
      - name: "Set environment variables (Windows)"
        shell: pwsh
        run: |
          (Get-ItemProperty "HKLM:System\CurrentControlSet\Control\FileSystem").LongPathsEnabled

      - name: Set up MSVC x64
        uses: ilammy/msvc-dev-cmd@v1

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.3
        with:
          package-dir: "bindings/python"
        env:
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_TEST_SKIP: "*"

      - uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl

  build_wheels_linux:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cibw_build: ["cp38-*", "cp39-*", "cp310-*", "cp311-*"]
        cibw_archs: ["x86_64", "i686", "aarch64", "ppc64le"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        if: matrix.cibw_archs != 'x86_64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.3
        with:
          package-dir: "bindings/python"
        env:
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_TEST_SKIP: "*"

      - uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl

  build_wheels_macos:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        cibw_build: ["cp38-*", "cp39-*", "cp310-*", "cp311-*"]
        cibw_archs: ["x86_64"]
    env:
      SYSTEM_VERSION_COMPAT: 0 # https://github.com/actions/setup-python/issues/469#issuecomment-1192522949
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.3
        with:
          package-dir: "bindings/python"
        env:
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_TEST_SKIP: "*"

      - uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl

  build_wheels_macos_arm64:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        cibw_build: ["cp38-*", "cp39-*", "cp310-*", "cp311-*"]
        cibw_archs: ["arm64"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.3
        with:
          package-dir: "bindings/python"
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_TEST_SKIP: "*"
          CIBW_REPAIR_WHEEL_COMMAND: |
            echo "Target delocate archs: {delocate_archs}"

            ORIGINAL_WHEEL={wheel}

            echo "Running delocate-listdeps to list linked original wheel dependencies"
            delocate-listdeps --all $ORIGINAL_WHEEL

            echo "Renaming .whl file when architecture is 'macosx_arm64'"
            RENAMED_WHEEL=${ORIGINAL_WHEEL//x86_64/arm64}

            echo "Wheel will be renamed to $RENAMED_WHEEL"
            mv $ORIGINAL_WHEEL $RENAMED_WHEEL

            echo "Running delocate-wheel command on $RENAMED_WHEEL"
            delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v $RENAMED_WHEEL

            echo "Running delocate-listdeps to list linked wheel dependencies"
            WHEEL_SIMPLE_FILENAME="${RENAMED_WHEEL##*/}"
            delocate-listdeps --all {dest_dir}/$WHEEL_SIMPLE_FILENAME

            echo "DONE."

      - uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl

  upload_to_pypi:
    if: |
      (github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/'))
      || github.event_name == 'workflow_dispatch'
    needs:
      [
        "build_sdist",
        "build_wheels_windows",
        "build_wheels_linux",
        "build_wheels_macos",
        "build_wheels_macos_arm64",
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - name: Publish distribution ðŸ“¦ to test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.testpypi_pass }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish distribution ðŸ“¦ to PyPI
        if: ${{ success() }}
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_pass }}
